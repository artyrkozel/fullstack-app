/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export type ConinsControllerGetCoinsListParams = {
    limit: number;
    page: number;
};

export interface CoinResponse {
    '24hVolume': string;
    btcPrice: string;
    change: string;
    coinrankingUrl: string;
    color: string;
    contractAddresses: string[];
    iconUrl: string;
    listedAt: number;
    lowVolume: boolean;
    marketCap: string;
    name: string;
    price: string;
    rank: number;
    sparkline: string[];
    symbol: string;
    uuid: string;
}

export interface LoginDto {
    email: string;
    password: string;
}

export interface RegisterDto {
    email: string;
    password: string;
    passwordRepeat: string;
}

export interface UserResponse {
    email: string;
    id: string;
    roles: string[];
    updatedAt: string;
}

export interface CreateUserDto {
    email: string;
    password: string;
    roles: string[];
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getBlockList = () => {
    const userControllerCreate = (
        createUserDto: BodyType<CreateUserDto>,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>(
            { url: `/user`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createUserDto },
            options,
        );
    };

    const userControllerFindOne = (idOrEmail: string, options?: SecondParameter<typeof createInstance>) => {
        return createInstance<UserResponse>({ url: `/user/${idOrEmail}`, method: 'GET' }, options);
    };

    const userControllerRemove = (id: string, options?: SecondParameter<typeof createInstance>) => {
        return createInstance<UserResponse>({ url: `/user/${id}`, method: 'DELETE' }, options);
    };

    const authControllerRegister = (
        registerDto: BodyType<RegisterDto>,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>(
            {
                url: `/auth/register`,
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                data: registerDto,
            },
            options,
        );
    };

    const authControllerLogin = (loginDto: BodyType<LoginDto>, options?: SecondParameter<typeof createInstance>) => {
        return createInstance<void>(
            { url: `/auth/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: loginDto },
            options,
        );
    };

    const authControllerLogout = (options?: SecondParameter<typeof createInstance>) => {
        return createInstance<void>({ url: `/auth/logout`, method: 'GET' }, options);
    };

    const authControllerRefreshTokens = (options?: SecondParameter<typeof createInstance>) => {
        return createInstance<void>({ url: `/auth/refresh-tokens`, method: 'GET' }, options);
    };

    const coninsControllerGetCoinsList = (
        params: ConinsControllerGetCoinsListParams,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>({ url: `/coins/list`, method: 'GET', params }, options);
    };

    const coninsControllerGetCoinBuId = (coinId: string, options?: SecondParameter<typeof createInstance>) => {
        return createInstance<CoinResponse>({ url: `/coins/${coinId}`, method: 'GET' }, options);
    };

    return {
        userControllerCreate,
        userControllerFindOne,
        userControllerRemove,
        authControllerRegister,
        authControllerLogin,
        authControllerLogout,
        authControllerRefreshTokens,
        coninsControllerGetCoinsList,
        coninsControllerGetCoinBuId,
    };
};
export type UserControllerCreateResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['userControllerCreate']>>
>;
export type UserControllerFindOneResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['userControllerFindOne']>>
>;
export type UserControllerRemoveResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['userControllerRemove']>>
>;
export type AuthControllerRegisterResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['authControllerRegister']>>
>;
export type AuthControllerLoginResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['authControllerLogin']>>
>;
export type AuthControllerLogoutResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['authControllerLogout']>>
>;
export type AuthControllerRefreshTokensResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['authControllerRefreshTokens']>>
>;
export type ConinsControllerGetCoinsListResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['coninsControllerGetCoinsList']>>
>;
export type ConinsControllerGetCoinBuIdResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getBlockList>['coninsControllerGetCoinBuId']>>
>;
